# -*- coding: utf-8 -*-
"""SVM_features.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iTrRlq6vvJQ-9BNMp-h3GWNCBB7nW5I1

#**5. Support Vector Machine (SVM)**
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np

from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import cross_val_score,GridSearchCV, train_test_split
from sklearn.metrics import confusion_matrix, classification_report, ConfusionMatrixDisplay, accuracy_score
from sklearn.svm import SVC

"""**Load Dataset**"""

df = pd.read_csv("gtzan_features.csv",sep=",")

"""**Split of the dataset**"""

X=df.drop(['class','file_name'],axis=1)
X_mfcc = df[['mfcc_1', 'mfcc_2', 'mfcc_3', 'mfcc_4', 'mfcc_5','mfcc_6', 'mfcc_7', 'mfcc_8', 'mfcc_9', 'mfcc_10', 'mfcc_11']]
X_spectral = df[['spectral_contrast_1', 'spectral_contrast_2','spectral_contrast_3', 'spectral_contrast_4', 'spectral_contrast_5','spectral_contrast_6', 'spectral_contrast_7']]
X_chroma = df[['chroma_1', 'chroma_2','chroma_3', 'chroma_4', 'chroma_5', 'chroma_6', 'chroma_7', 'chroma_8','chroma_9', 'chroma_10', 'chroma_11', 'chroma_12']]
X_rms = df[['rms']]

y=df['class']

X.columns

"""**Normalization**"""

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
X_train_mfcc, X_test_mfcc, y_train_mfcc, y_test_mfcc = train_test_split(X_mfcc, y, test_size=0.2, random_state=42)
X_train_spectral, X_test_spectral, y_train_spectral, y_test_spectral = train_test_split(X_spectral, y, test_size=0.2, random_state=42)
X_train_chroma, X_test_chroma, y_train_chroma, y_test_chroma = train_test_split(X_chroma, y, test_size=0.2, random_state=42)
X_train_rms, X_test_rms, y_train_rms, y_test_rms = train_test_split(X_rms, y, test_size=0.2, random_state=42)

scaler = StandardScaler()
scaler_mfcc = StandardScaler()
scaler_spectral = StandardScaler()
scaler_chroma = StandardScaler()
scaler_rms = StandardScaler()

X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)


X_train_mfcc_scaled = scaler_mfcc.fit_transform(X_train_mfcc)
X_test_mfcc_scaled = scaler_mfcc.transform(X_test_mfcc)

X_train_spectral_scaled = scaler_spectral.fit_transform(X_train_spectral)
X_test_spectral_scaled = scaler_spectral.transform(X_test_spectral)

X_train_chroma_scaled = scaler_chroma.fit_transform(X_train_chroma)
X_test_chroma_scaled = scaler_chroma.transform(X_test_chroma)

X_train_rms_scaled = scaler_rms.fit_transform(X_train_rms)
X_test_rms_scaled = scaler_rms.transform(X_test_rms)

"""**SVM Initial Models**"""

Ã‡# Fitting SVM with different kernels
kernels = ['linear', 'rbf', 'poly', 'sigmoid']

for kernel in kernels:
    print(f"\nKernel: {kernel}")
    model = SVC(kernel=kernel)
    model.fit(X_train_scaled, y_train)
    y_pred = model.predict(X_test_scaled)
    acc = accuracy_score(y_test, y_pred)
    print(f"Accuracy: {acc:.4f}")
    print(classification_report(y_test, y_pred))

"""**RBF and linear SVM models**"""

X_train_scaled_df = pd.DataFrame(X_train_scaled, columns=X.columns)
X_test_scaled_df = pd.DataFrame(X_test_scaled, columns=X.columns)
svm_linear = SVC(kernel='linear')
svm_rbf = SVC(kernel='rbf')

"""**Forward feature selection**"""

# Feature Selection using Sequential Feature Selector
from sklearn.feature_selection import SequentialFeatureSelector

# Forward feature selection
sfs = SequentialFeatureSelector(estimator=svm_linear, n_features_to_select='auto', direction='forward')

sfs.fit(X_train_scaled_df, y_train)
selected_features = X_train_scaled_df.columns[sfs.get_support()]
print("Selected features:", list(selected_features))

svm_linear.fit(X_train_scaled_df[selected_features], y_train)
y_pred = svm_linear.predict(X_test_scaled_df[selected_features])
acc = accuracy_score(y_test, y_pred)
print("Accuracy with selected features for linear kernel:", acc)
print(classification_report(y_test, y_pred))

svm_rbf.fit(X_train_scaled_df[selected_features], y_train)
y_pred = svm_rbf.predict(X_test_scaled_df[selected_features])
acc = accuracy_score(y_test, y_pred)
print("Accuracy with selected features for rbf kernel:", acc)
print(classification_report(y_test, y_pred))

"""**Backward feature selection**"""

# Backward feature selection
sfs = SequentialFeatureSelector(estimator=svm_linear, n_features_to_select='auto', direction='backward')

sfs.fit(X_train_scaled_df, y_train)
selected_features = X_train_scaled_df.columns[sfs.get_support()]
print("Selected features:", list(selected_features))

svm_linear.fit(X_train_scaled_df[selected_features], y_train)
y_pred = svm_linear.predict(X_test_scaled_df[selected_features])
acc = accuracy_score(y_test, y_pred)
print("Accuracy with selected features for linear kernel:", acc)
print(classification_report(y_test, y_pred))

svm_rbf.fit(X_train_scaled_df[selected_features], y_train)
y_pred = svm_rbf.predict(X_test_scaled_df[selected_features])
acc = accuracy_score(y_test, y_pred)
print("Accuracy with selected features for rbf kernel:", acc)
print(classification_report(y_test, y_pred))

"""**Recursive Feature Elimination(RFE)**"""

from sklearn.feature_selection import RFE

# RFE to select top k features
rfe = RFE(estimator=svm_linear, n_features_to_select=27, step=1)
rfe.fit(X_train_scaled_df, y_train)

selected_features = X_train_scaled_df.columns[rfe.support_]
selected_rfe = selected_features.copy()
print("Selected features:", list(selected_features))

svm_linear.fit(X_train_scaled_df[selected_features], y_train)
y_pred = svm_linear.predict(X_test_scaled_df[selected_features])
acc = accuracy_score(y_test, y_pred)
print("Accuracy with selected features for linear kernel:", acc)
print(classification_report(y_test, y_pred))

svm_rbf.fit(X_train_scaled_df[selected_features], y_train)
y_pred = svm_rbf.predict(X_test_scaled_df[selected_features])
acc = accuracy_score(y_test, y_pred)
print("Accuracy with selected features for rbf kernel:", acc)
print(classification_report(y_test, y_pred))

"""**RFE with improved model**"""

from sklearn.model_selection import GridSearchCV
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, classification_report

# Define parameter grid for Linear kernel
param_grid_linear = {
    'C': [0.55, 0.6, 0.65, 0.7],  # Regularization parameter
    'gamma': ['scale', 'auto'],  # Kernel coefficient
}

# Define parameter grid for RBF kernel
param_grid_rbf = {
    'C': [2.5,2.75, 3, 3.25, 3.5],
    'gamma': ['scale', 'auto', 0.1, 0.05, 0.15],
}

# Initialize SVM classifiers
svm_linear = SVC(kernel='linear', random_state=42)
svm_rbf = SVC(kernel='rbf', random_state=42)

# Perform Grid Search for Linear Kernel
grid_search_linear = GridSearchCV(svm_linear, param_grid_linear, cv=5, n_jobs=-1, scoring='accuracy')
grid_search_linear.fit(X_train_scaled_df[selected_rfe], y_train)

# Best parameters for Linear Kernel
print("Best parameters for Linear Kernel:", grid_search_linear.best_params_)

# Mean cross-validation accuracy for Linear Kernel
mean_cv_acc_linear = grid_search_linear.best_score_
print(f"Mean Cross-validation Accuracy for Linear Kernel: {mean_cv_acc_linear:.4f}")

# Evaluate on the test set
y_pred_linear = grid_search_linear.predict(X_test_scaled_df[selected_rfe])
acc_linear = accuracy_score(y_test, y_pred_linear)
print(f"Accuracy with selected features for linear kernel after grid search (test set): {acc_linear:.4f}")
print(classification_report(y_test, y_pred_linear))

# Perform Grid Search for RBF Kernel
grid_search_rbf = GridSearchCV(svm_rbf, param_grid_rbf, cv=5, n_jobs=-1, scoring='accuracy')
grid_search_rbf.fit(X_train_scaled_df[selected_rfe], y_train)

# Best parameters for RBF Kernel
print("Best parameters for RBF Kernel:", grid_search_rbf.best_params_)

# Mean cross-validation accuracy for RBF Kernel
mean_cv_acc_rbf = grid_search_rbf.best_score_
print(f"Mean Cross-validation Accuracy for RBF Kernel: {mean_cv_acc_rbf:.4f}")

# Evaluate on the test set
y_pred_rbf = grid_search_rbf.predict(X_test_scaled_df[selected_rfe])
acc_rbf = accuracy_score(y_test, y_pred_rbf)
print(f"Accuracy with selected features for rbf kernel after grid search (test set): {acc_rbf:.4f}")
print(classification_report(y_test, y_pred_rbf))

"""**Recursive Feature Elimination with
Cross-Validation(RFECV)**
"""

from sklearn.feature_selection import RFECV

# RFECV feature selection
rfecv = RFECV(estimator=svm_linear, step=1, cv=5, scoring='accuracy', n_jobs=-1)
rfecv.fit(X_train_scaled_df, y_train)

selected_features = X_train_scaled_df.columns[rfecv.support_]
print("Optimal number of features:", rfecv.n_features_)
print("Selected features:", list(selected_features))

svm_linear.fit(X_train_scaled_df[selected_features], y_train)
y_pred = svm_linear.predict(X_test_scaled_df[selected_features])
acc = accuracy_score(y_test, y_pred)
print("Accuracy with selected features for linear kernel:", acc)
print(classification_report(y_test, y_pred))

svm_rbf.fit(X_train_scaled_df[selected_features], y_train)
y_pred = svm_rbf.predict(X_test_scaled_df[selected_features])
acc = accuracy_score(y_test, y_pred)
print("Accuracy with selected features for rbf kernel:", acc)
print(classification_report(y_test, y_pred))

"""**RFECV with improved model**"""

from sklearn.model_selection import GridSearchCV
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, classification_report

# Define parameter grid for Linear kernel
param_grid_linear = {
    'C': [0.55, 0.6, 0.65, 0.7],  # Regularization parameter
    'gamma': ['scale', 'auto'],  # Kernel coefficient
}

# Define parameter grid for RBF kernel
param_grid_rbf = {
    'C': [ 3, 3.25, 3.5,3.75, 4, 4.5],
    'gamma': ['scale', 'auto', 0.1, 0.05, 0.15],
}

# Initialize SVM classifiers
svm_linear = SVC(kernel='linear', random_state=42)
svm_rbf = SVC(kernel='rbf', random_state=42)

# Perform Grid Search for Linear Kernel
grid_search_linear = GridSearchCV(svm_linear, param_grid_linear, cv=5, n_jobs=-1, scoring='accuracy')
grid_search_linear.fit(X_train_scaled_df[selected_features], y_train)

# Best parameters for Linear Kernel
print("Best parameters for Linear Kernel:", grid_search_linear.best_params_)

# Mean cross-validation accuracy for Linear Kernel
mean_cv_acc_linear = grid_search_linear.best_score_
print(f"Mean Cross-validation Accuracy for Linear Kernel: {mean_cv_acc_linear:.4f}")

# Evaluate on the test set
y_pred_linear = grid_search_linear.predict(X_test_scaled_df[selected_features])
acc_linear = accuracy_score(y_test, y_pred_linear)
print(f"Accuracy with selected features for linear kernel after grid search (test set): {acc_linear:.4f}")
print(classification_report(y_test, y_pred_linear))

# Perform Grid Search for RBF Kernel
grid_search_rbf = GridSearchCV(svm_rbf, param_grid_rbf, cv=5, n_jobs=-1, scoring='accuracy')
grid_search_rbf.fit(X_train_scaled_df[selected_features], y_train)

# Best parameters for RBF Kernel
print("Best parameters for RBF Kernel:", grid_search_rbf.best_params_)

# Mean cross-validation accuracy for RBF Kernel
mean_cv_acc_rbf = grid_search_rbf.best_score_
print(f"Mean Cross-validation Accuracy for RBF Kernel: {mean_cv_acc_rbf:.4f}")

# Evaluate on the test set
y_pred_rbf = grid_search_rbf.predict(X_test_scaled_df[selected_features])
acc_rbf = accuracy_score(y_test, y_pred_rbf)
print(f"Accuracy with selected features for rbf kernel after grid search (test set): {acc_rbf:.4f}")
print(classification_report(y_test, y_pred_rbf))